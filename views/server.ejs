const Koa = require('koa');
const app = new Koa();

const json = require('koa-json');
const onerror = require('koa-onerror');
const bodyparser = require('koa-bodyparser');
const logger = require('koa-logger');
const cors = require('koa-cors');
const http = require('http');
const fs = require('fs');
const debug = require('debug')('demo:server');
const path = require('path');
const proxy = require('koa2-pixie-proxy')({host:"<%-proxy%>"});

const router = require('koa-router')();




// error handler
onerror(app);

// middlewares

app.use(cors());
app.use(bodyparser({
  enableTypes: ['json', 'form', 'text']
}));
app.use(json());
app.use(logger());


// logger
app.use(async(ctx, next) => {
  const start = new Date();
  await next();
  const ms = new Date() - start;
  console.log(`${ctx.method} ${ctx.url} - ${ms}ms`);
});

// routes

<%for(var module of modules){%>
<%for(var interfase of module.interfases){%>
<%if(interfase.proxyType===1){%>
  router.<%=interfase.method.toLowerCase()%>("<%=interfase.url%>",(ctx,next) => {
      ctx.body=interfase.mockRes
  });
<%}else if(interfase.proxyType===2){%>
router.<%=interfase.method.toLowerCase()%>("<%=interfase.url%>",proxy("<%=interfase.url%>"),(ctx,next) => {
  try{
    ctx.body=extend(interfase.mockRes,JSON.parse(ctx.body))
  }catch(e){
    ctx.body="该接口不能合并mock"
  }
});
<%}%>
<%}%>
<%}%>


router.get("/aaa/b",(ctx,next) => {
  ctx.body={
    a:1
  }
});

router.get('/', proxy("/"));

app.use(router.routes(), router.allowedMethods());


const port = normalizePort(process.env.PORT || '3013');
// app.set('port', port);

/**
 * Create HTTP server.
 */

const server = http.createServer(app.callback());

/**
 * Listen on provided port, on all network interfaces.
 */

server.listen(port);
server.on('error', onError);
server.on('listening', onListening);

/**
 * Normalize a port into a number, string, or false.
 */

function normalizePort(val) {
  var port = parseInt(val, 10);

  if (isNaN(port)) {
    // named pipe
    return val;
  }

  if (port >= 0) {
    // port number
    return port;
  }

  return false;
}

/**
 * Event listener for HTTP server "error" event.
 */

function onError(error) {
  if (error.syscall !== 'listen') {
    throw error;
  }

  let bind = typeof port === 'string'
    ? 'Pipe ' + port
    : 'Port ' + port;

  // handle specific listen errors with friendly messages
  switch (error.code) {
    case 'EACCES':
      console.error(bind + ' requires elevated privileges');
      process.exit(1);
      break;
    case 'EADDRINUSE':
      console.error(bind + ' is already in use');
      process.exit(1);
      break;
    default:
      throw error;
  }
}

/**
 * Event listener for HTTP server "listening" event.
 */

function onListening() {
  const addr = server.address();
  const bind = typeof addr === 'string'
    ? 'pipe ' + addr
    : 'port ' + addr.port;
  debug('Listening on ' + bind);
}


//tools

function extend(){
  const _isObject = function(o){
      return Object.prototype.toString.call(o) === '[object Object]';
  }

  const _extend = function self(destination, source,ignore) {
      let property;
      for (property in destination) {
          if (destination.hasOwnProperty(property)) {

              // 若destination[property]和sourc[property]都是对象，则递归
              if (_isObject(destination[property]) && _isObject(source[property])) {
                  self(destination[property], source[property],ignore);
              };

              // 若sourc[property]已存在，则跳过
              if (source.hasOwnProperty(property)&&ignore) {
                  source[property] = destination[property];
              }else if(ignore){
                continue
              } else {
                  source[property] = destination[property];
              }
          }
      }
  }
  let arr = arguments,
      result = {},
      i,
      j=0;

  if (!arr.length) return {};

  if(arr[0]===true){
    if (arr.length===1) return {};
    j=1;
    result={...arr[1]}
  }



  for (i =j; i < arr.length; i++) {
      if (_isObject(arr[i])) {
          _extend(arr[i], result,!!j);
      };
  }

  arr[j] = result;
  return result;
}
